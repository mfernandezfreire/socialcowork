{"version":3,"sources":["components/auth/AuthService.js","components/navbar/Navbar.js","components/auth/Signup.js","components/auth/Login.js","components/contents/api.js","components/contents/Contents.js","App.js","serviceWorker.js","index.js"],"names":["AuthService","signup","username","password","campus","course","service","post","then","response","data","login","loggedin","get","logout","this","axios","create","baseURL","process","withCredentials","Navbar","props","handleLogout","e","state","loggedInUser","nextProps","setState","className","onClick","_id","to","Component","Signup","handleFormSubmit","event","preventDefault","getUser","user","catch","error","handleChange","target","name","value","onSubmit","type","onChange","selected","Login","errHandler","err","message","file","formData","FormData","append","headers","res","Contents","photos","console","log","files","api","photoData","newPhotos","push","url","handleSubmit","map","photo","key","src","alt","App","userObj","fetchUser","Fragment","userInSession","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wVAgCeA,EA5Bb,aAAe,IAAD,gCAOdC,OAAS,SAACC,EAAUC,EAAUC,EAAQC,GACpC,OAAO,EAAKC,QAAQC,KAAK,UAAW,CAACL,WAAUC,WAAUC,SAAQC,WAChEG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SATf,KAYdC,MAAQ,SAACT,EAAUC,GACjB,OAAO,EAAKG,QAAQC,KAAK,SAAU,CAACL,WAAUC,aAC7CK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAdf,KAiBdE,SAAW,WACT,OAAO,EAAKN,QAAQO,IAAI,gBACvBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAnBf,KAsBdI,OAAS,WACP,OAAO,EAAKR,QAAQO,IAAI,WACvBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAvB3BK,KAAKT,QAAUU,IAAMC,OAAO,CAC1BC,QAAQ,GAAD,OAAKC,2CAAL,SACPC,iBAAiB,KCsDRC,G,kBApDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,aAAe,SAAAC,GACb,EAAKF,MAAMR,UATX,EAAKW,MAAQ,CAAEC,aAAc,MAC7B,EAAKpB,QAAU,IAAIN,EAHF,E,uFAMO2B,GACxBZ,KAAKa,SAAL,eAAmBb,KAAKU,MAAxB,CAA+BC,aAAcC,EAAS,mB,+BAQtD,OAAIZ,KAAKU,MAAMC,aAEX,yBAAKG,UAAU,aACb,4BACE,4BACE,uCAAad,KAAKU,MAAMC,aAAaxB,WAEvC,4BACE,uBAAG4B,QAASf,KAAKQ,cAAjB,YAGJ,yBAAKM,UAAU,UAEb,uCAAad,KAAKU,MAAMC,aAAaxB,UACrC,uCAAaa,KAAKU,MAAMC,aAAaK,OAMzC,6BACE,yBAAKF,UAAU,aACb,4BAIE,4BACE,kBAAC,IAAD,CAAMG,GAAG,UAAT,iB,GA3CKC,c,QC6GNC,E,YA9Gb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KAKRa,iBAAmB,SAAAC,GAEjBA,EAAMC,iBACN,IAAMnC,EAAW,EAAKuB,MAAMvB,SACtBC,EAAW,EAAKsB,MAAMtB,SACtBC,EAAS,EAAKqB,MAAMrB,OACpBC,EAAS,EAAKoB,MAAMpB,OAG1B,EAAKC,QACFL,OAAOC,EAAUC,EAAUC,EAAQC,GACnCG,MAAK,SAAAC,GACJ,EAAKmB,SAAS,CACZ1B,SAAU,GACVC,SAAU,GACVC,OAAQ,GACRC,OAAQ,KAKV,EAAKiB,MAAMgB,QAAQ7B,EAAS8B,SAE7BC,OAAM,SAAAC,GACL,EAAKb,SAAS,CACZ1B,SAAUA,EACVC,SAAUA,EACVC,OAAQA,EACRC,OAAQA,EACRoC,OAAO,QAnCI,EAwCnBC,aAAe,SAAAN,GAAU,IAAD,EACEA,EAAMO,OAAtBC,EADc,EACdA,KAAMC,EADQ,EACRA,MACd,EAAKjB,SAAL,eAAiBgB,EAAOC,KAxCxB,EAAKpB,MAAQ,CAAEvB,SAAU,GAAIC,SAAU,GAAIC,OAAQ,GAAIC,OAAQ,IAC/D,EAAKC,QAAU,IAAIN,EAHF,E,sEA6CT,IAAD,OACP,OACE,6BACE,0FAEA,0BAAM8C,SAAU/B,KAAKoB,kBACnB,kCACE,4CACA,2BACEY,KAAK,OACLH,KAAK,WACLC,MAAO9B,KAAKU,MAAMvB,SAClB8C,SAAU,SAAAxB,GAAC,OAAI,EAAKkB,aAAalB,OAIrC,kCACE,4CACA,2BACEuB,KAAK,WACLH,KAAK,WACLC,MAAO9B,KAAKU,MAAMtB,SAClB6C,SAAU,SAAAxB,GAAC,OAAI,EAAKkB,aAAalB,OAIrC,kCACE,yCACA,4BACEoB,KAAK,SACLC,MAAO9B,KAAKU,MAAMrB,OAClB4C,SAAU,SAAAxB,GAAC,OAAI,EAAKkB,aAAalB,KAEjC,4BAAQqB,MAAM,SAASI,UAAQ,GAA/B,UACA,4BAAQJ,MAAM,aAAd,aACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,YAIJ,kCACE,yCACA,4BACED,KAAK,SACLC,MAAO9B,KAAKU,MAAMpB,OAClB2C,SAAU,SAAAxB,GAAC,OAAI,EAAKkB,aAAalB,KAEjC,4BAAQqB,MAAM,SAASI,UAAQ,GAA/B,UACA,4BAAQJ,MAAM,SAAd,SACA,4BAAQA,MAAM,kBAAd,oBAGJ,2BAAOE,KAAK,SAASF,MAAM,aAG7B,4BAAK9B,KAAKU,MAAMgB,MAAQ,QAAU,S,GAzGrBR,aC2DNiB,E,YA3Db,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAKRa,iBAAmB,SAACC,GAClBA,EAAMC,iBACN,IAAMnC,EAAW,EAAKuB,MAAMvB,SACtBC,EAAW,EAAKsB,MAAMtB,SAE5B,EAAKG,QAAQK,MAAMT,EAAUC,GAC1BK,MAAK,SAAAC,GACJ,EAAKmB,SAAS,CACZ1B,SAAUA,EACVC,SAAUA,EACVsC,OAAO,IAGT,EAAKnB,MAAMgB,QAAQ7B,MAEpB+B,OAAM,SAAAC,GACL,EAAKb,SAAS,CACZ1B,SAAUA,EACVC,SAAUA,EACVsC,OAAO,QAzBI,EA8BnBC,aAAe,SAACN,GAAW,IAAD,EACAA,EAAMO,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACd,EAAKjB,SAAL,eAAiBgB,EAAOC,KA9BxB,EAAKpB,MAAQ,CAAEvB,SAAU,GAAIC,SAAU,IACvC,EAAKG,QAAU,IAAIN,EAHF,E,sEAmCT,IAAD,OAEP,OAAQ,6BACN,yDAEA,0BAAM8C,SAAU/B,KAAKoB,kBACnB,kCACE,4CACA,2BAAOY,KAAK,OAAOH,KAAK,WAAWC,MAAO9B,KAAKU,MAAMvB,SAAU8C,SAAU,SAAAxB,GAAC,OAAI,EAAKkB,aAAalB,OAGlG,kCACE,4CACA,2BAAOuB,KAAK,WAAWH,KAAK,WAAWC,MAAO9B,KAAKU,MAAMtB,SAAU6C,SAAU,SAAAxB,GAAC,OAAI,EAAKkB,aAAalB,OAGtG,2BAAOuB,KAAK,SAASF,MAAM,WAG7B,4BAAK9B,KAAKU,MAAMgB,MAAQ,QAAU,S,GAvDpBR,a,QCHd3B,EAAUU,IAAMC,OAAO,CAC3BC,QAAQ,4BACRE,iBAAiB,IAGb+B,EAAa,SAAAC,GAEjB,GAAIA,EAAI3C,UAAY2C,EAAI3C,SAASC,KAE/B,MAAM0C,EAAI3C,SAASC,KAAK2C,QAE1B,MAAMD,GAGO,WAGFE,GACT,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBhD,EACJC,KAAK,eAAgBgD,EAAU,CAC9BG,QAAS,CACP,eAAgB,yBAGnBlD,MAAK,SAAAmD,GAAG,OAAIA,EAAIjD,QAChB8B,MAAMW,IC6BES,E,YAtDb,WAAYtC,GAAQ,IAAD,8BACjB,4CAAMA,KACDG,MAAQ,CACX6B,KAAM,KACNO,OAAQ,GACR3D,SAAU,MALK,E,0EASNsB,GACXsC,QAAQC,IAAI,yBACZD,QAAQC,IAAIvC,EAAEmB,OAAOqB,MAAM,IAE3BjD,KAAKa,SAAL,eACKb,KAAKU,MADV,CAEE6B,KAAM9B,EAAEmB,OAAOqB,MAAM,Q,mCAKZxC,GAAI,IAAD,OACdA,EAAEa,iBAEF4B,EAAelD,KAAKU,MAAM6B,MAAM9C,MAAK,SAAA0D,GACnC,IAAIC,EAAS,YAAO,EAAK1C,MAAMoC,QAC/BM,EAAUC,KAAKF,EAAUG,KAEzB,EAAKzC,SAAL,eACK,EAAKH,MADV,CAEEoC,OAAQM,U,+BAIJ,IAAD,OACP,OAEE,yBAAKtC,UAAU,YACf,6BACE,8lBAFF,KAKE,4CAEA,0BAAMiB,SAAU,SAACtB,GAAD,OAAK,EAAK8C,aAAa9C,KACrC,2BAAOuB,KAAK,OAAOC,SAAU,SAACxB,GAAD,OAAK,EAAKkB,aAAalB,MADtD,IAC6D,6BAC3D,4BAAQuB,KAAK,UAAb,iBAGDhC,KAAKU,MAAMoC,OAAOU,KAAI,SAAAC,GAAK,OAAI,yBAAKC,IAAKD,EAAMH,IAAKK,IAAKF,EAAMH,IAAKM,IAAI,a,GAjD1D1C,aCqFR2C,E,YAzEb,WAAYtD,GAAQ,IAAD,8BACjB,4CAAMA,KAQRgB,QAAU,SAAAuC,GACR,EAAKjD,SAAS,CACZF,aAAcmD,KAXC,EAenB/D,OAAS,WACP,EAAKR,QAAQQ,SAASN,MAAK,WACzB,EAAKoB,SAAS,CAAEF,aAAc,WAdhC,EAAKD,MAAQ,CAAEC,aAAc,MAC7B,EAAKpB,QAAU,IAAIN,EAEnB,EAAK8E,YANY,E,yEAsBN,IAAD,OACV,OAAO/D,KAAKT,QACTM,WACAJ,MAAK,SAAAC,GACJ,EAAKmB,SAAS,CACZF,aAAcjB,OAGjB+B,OAAM,SAAAY,GACL,EAAKxB,SAAS,CACZF,cAAc,S,+BAKZ,IAAD,OAEP,OAAIX,KAAKU,MAAMC,aAGX,kBAAC,IAAMqD,SAAP,KACE,kBAAC,IAAD,CAAU/C,GAAG,UACb,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQmD,cAAejE,KAAKU,MAAMC,aAAcZ,OAAQC,KAAKD,SAE7D,kBAAC,EAAD,SAQN,kBAAC,IAAMiE,SAAP,KACE,kBAAC,IAAD,CAAU/C,GAAG,WACb,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQmD,cAAejE,KAAKU,MAAMC,aAAcZ,OAAQC,KAAKD,SAC7D,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,CAAQ7C,QAAS,EAAKA,aAChE,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,CAAO7C,QAAS,EAAKA,qB,GAjE5DL,aCDEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBO,SAASC,eAAe,SD4H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdxD,OAAM,SAAAC,GACLqB,QAAQrB,MAAMA,EAAMY,c","file":"static/js/main.9e922217.chunk.js","sourcesContent":["// auth/auth-service.js\nimport axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/auth`,\n      withCredentials: true\n    });\n  }\n\n  signup = (username, password, campus, course) => {\n    return this.service.post('/signup', {username, password, campus, course})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/currentUser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.get('/logout',)\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;","// navbar/Navbar.js\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AuthService from \"../auth/AuthService\";\n// import logo from \"../../logo-ironhack-blue.png\";\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ ...this.state, loggedInUser: nextProps[\"userInSession\"] });\n  }\n\n  handleLogout = e => {\n    this.props.logout();\n  };\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <nav className=\"nav-style\">\n          <ul>\n            <li>\n              <h2>Welcome {this.state.loggedInUser.username}</h2>\n            </li>\n            <li>\n              <a onClick={this.handleLogout}>Logout</a>\n            </li>\n          </ul>\n          <div className=\"header\">\n            {/* <img src={logo} alt=\"\" height=\"100\"/> */}\n            <h2>Welcome {this.state.loggedInUser.username}</h2>\n            <h2>Welcome {this.state.loggedInUser._id}</h2>\n          </div>\n        </nav>\n      );\n    } else {\n      return (\n        <div>\n          <nav className=\"nav-style\">\n            <ul>\n              {/* <li>\n                <Link to=\"/signup\">Signup</Link>\n              </li> */}\n              <li>\n                <Link to=\"/login\">Login</Link>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Navbar;\n","// auth/Signup.js\nimport React, { Component } from \"react\";\nimport AuthService from \"./AuthService\";\n\n//signup y login son iguales a excepciÃ³n de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"\", password: \"\", campus: \"\", course: \"\" };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = event => {\n    debugger\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n    const campus = this.state.campus;\n    const course = this.state.course;\n\n    //aquÃ­ llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service\n      .signup(username, password, campus, course)\n      .then(response => {\n        this.setState({\n          username: \"\",\n          password: \"\",\n          campus: \"\",\n          course: \"\"\n        });\n        //aquÃ­ elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la funciÃ³n getUser de App para mÃ¡s info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user);\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          campus: campus,\n          course: course,\n          error: true\n        });\n      });\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>Â¿Â¿Crea un proyecto o colabora, este es el comienzo!!</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <fieldset>\n            <label>Username:</label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={this.state.username}\n              onChange={e => this.handleChange(e)}\n            />\n          </fieldset>\n\n          <fieldset>\n            <label>Password:</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={this.state.password}\n              onChange={e => this.handleChange(e)}\n            />\n          </fieldset>\n\n          <fieldset>\n            <label>Campus</label>\n            <select\n              name=\"campus\"\n              value={this.state.campus}\n              onChange={e => this.handleChange(e)}\n            >\n              <option value=\"Madrid\" selected>Madrid</option>\n              <option value=\"Barcelona\">Barcelona</option>\n              <option value=\"Paris\">Paris</option>\n              <option value=\"Berlin\">Berlin</option>\n              <option value=\"Amsterdam\">Amsterdam</option>\n              <option value=\"Mexico\">Mexico</option>\n              <option value=\"Sao Paulo\">Sao Paulo</option>\n              <option value=\"Lisbon\">Lisbon</option>\n            </select>\n          </fieldset>\n\n          <fieldset>\n            <label>Course</label>\n            <select\n              name=\"course\"\n              value={this.state.course}\n              onChange={e => this.handleChange(e)}\n            >\n              <option value=\"WebDev\" selected>WebDev</option>\n              <option value=\"UX/UI\">UX/UI</option>\n              <option value=\"Data Analytics\">Data Analytics</option>\n            </select>\n          </fieldset>\n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n\n        <h1>{this.state.error ? \"Error\" : \"\"}</h1>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","// auth/Signup.js\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from './AuthService'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          error: false\n        });\n\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (<div>\n      <h3>Please, login to our site</h3>\n\n      <form onSubmit={this.handleFormSubmit}>\n        <fieldset>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <fieldset>\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n\n      <h1>{this.state.error ? 'Error' : ''}</h1>\n    </div>)\n  }\n}\n\nexport default Login;","import axios from 'axios'\n\nconst service = axios.create({\n  baseURL:'http://localhost:3010/api',\n  withCredentials: true\n})\n\nconst errHandler = err => {\n  // console.error(err);\n  if (err.response && err.response.data) {\n    // console.error(\"API response\", err.response.data);\n    throw err.response.data.message\n  }\n  throw err;\n}\n\nexport default {\n\n  // Method addPicture\n  addPicture(file) {\n    const formData = new FormData();\n    formData.append(\"photo\", file)\n    return service\n      .post('/auth/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then(res => res.data)\n      .catch(errHandler);\n  }\n}","import React, { Component } from 'react';\nimport api from './api';\n\nclass Contents extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      file: null,\n      photos: [],\n      username: null\n    }\n  }\n\n  handleChange(e) {\n    console.log(\"archivos seleccionado\")\n    console.log(e.target.files[0])\n\n    this.setState({\n      ...this.state,\n      file: e.target.files[0]\n    })\n  }\n\n  //esta funciÃ³n maneja quÃ© pasa cuando hago submit en el formulario de subida de imÃ¡genes\n  handleSubmit(e) {\n    e.preventDefault()\n    // Reuse of the method \"addPicture\" from the file '../api'\n    api.addPicture(this.state.file).then(photoData => {\n      let newPhotos = [...this.state.photos]\n      newPhotos.push(photoData.url)\n\n      this.setState({\n        ...this.state,\n        photos: newPhotos\n      })\n    })\n  }\n  render() {                \n    return (\n      \n      <div className=\"Contents\">\n      <div>\n        <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>\n        </div>);\n\n        <h2>Photo Upload</h2>\n\n        <form onSubmit={(e)=>this.handleSubmit(e)}>\n          <input type=\"file\" onChange={(e)=>this.handleChange(e)} /> <br/>\n          <button type=\"submit\">Upload photo</button>\n        </form>\n\n        {this.state.photos.map(photo => <img key={photo.url} src={photo.url} alt=\"\" />)}\n      </div>\n    );\n  }\n}\n\nexport default Contents;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\n// import ProjectList from './components/projects/ProjectList';\nimport Navbar from \"./components/navbar/Navbar\";\n// import ProjectDetails from './components/projects/ProjectDetails';\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport AuthService from \"./components/auth/AuthService\";\nimport Contents from \"./components/contents/Contents\";\n\n//App es la aplicaciÃ³n base, que se sirve del servicio AuthService para conectar con la bbdd\nclass App extends Component {\n  //en el tiempo de construcciÃ³n de la aplicaciÃ³n, creamos una instancia del authservice\n  constructor(props) {\n    super(props);\n    //arrancamos el estado con un valor de loggedInUser con nada (luego lo vamos a reemplazar con el valor real)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n\n    this.fetchUser()\n  }\n\n  getUser = userObj => {\n    this.setState({\n      loggedInUser: userObj,\n    });\n  };\n\n  logout = () => {\n    this.service.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  //este mÃ©todo vuelca la informaciÃ³n del usuario y lo guarda en el state de app que siempre puedes revisitar\n  fetchUser() {\n    return this.service\n      .loggedin()\n      .then(response => {\n        this.setState({\n          loggedInUser: response,\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loggedInUser: false,\n        });\n      });\n  }\n\n  render() {\n    //aqui hacemos rendering condicional dependiendo de si tenemos un usuario logeado o no\n    if (this.state.loggedInUser) {\n      //en este caso mostramos los contenidos ya que hay usuario\n      return (\n        <React.Fragment>\n          <Redirect to=\"/home\" />\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              {/* aqui simplemente se muestra un lorem ipsum genÃ©rico para que veÃ¡is contenidos que solo se muestran a usuarios logeados */}\n              <Contents />\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    } else {\n      //si no estÃ¡s logeado, mostrar opcionalmente o login o signup\n      return (\n        <React.Fragment>\n          <Redirect to=\"/login\" />\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              <Switch>\n                <Route exact path=\"/signup\" render={() => <Signup getUser={this.getUser} />} />\n                <Route exact path=\"/login\" render={() => <Login getUser={this.getUser} />} />\n              </Switch>\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}